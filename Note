https://www.ntu.edu.sg/home/ehchua/programming/java/j4a_gui.html

<<<<<<<Label>>>>>>>>


public String getText();
public void setText(String strLabel);
public int getAlignment();
public void setAlignment(int alignment);  // Label.LEFT, Label.RIGHT, Label.CENTER


Label lblInput;                     // Declare an Label instance called lblInput
lblInput = new Label("Enter ID");   // Construct by invoking a constructor via the new operator
add(lblInput);                      // this.add(lblInput) - "this" is typically a subclass of Frame
lblInput.setText("Enter password"); // Modify the Label's text string
lblInput.getText();                 // Retrieve the Label's text string

<<<<<<Anonymous>>>>>>>>

// Allocate an anonymous Label instance.
// "this" container adds the instance.
// You CANNOT reference an anonymous instance to carry out further operations.
add(new Label("Enter Name: ", Label.RIGHT));
 
// Same as
Label xxx = new Label("Enter Name: ", Label.RIGHT)); // xxx assigned by compiler
add(xxx);


<<<<<<<Button>>>>>>>>

public String getLabel();
   // Get the label of this Button instance
public void setLabel(String btnLabel);
   // Set the label of this Button instance
public void setEnable(boolean enable);   
   // Enable or disable this Button. Disabled Button cannot be clicked.
   
Button btnColor = new Button("Red"); // Declare and allocate a Button instance called btnColor
add(btnColor);                       // "this" Container adds the Button
...
btnColor.setLabel("Green");          // Change the button's label
btnColor.getLabel();                 // Read the button's label
...
add(Button("Blue"));    // Create an anonymous Button. It CANNOT be referenced later


<<<<<Text Field>>>>>>>>


public TextField(String initialText, int columns);
   // Construct a TextField instance with the given initial text string with the number of columns.
public TextField(String initialText);
   // Construct a TextField instance with the given initial text string.
public TextField(int columns);
   // Construct a TextField instance with the number of columns.
   
   TextField tfInput = new TextField(30); // Declare and allocate an TextField instance called tfInput
add(tfInput);                          // "this" Container adds the TextField
TextField tfResult = new TextField();  // Declare and allocate an TextField instance called tfResult
tfResult.setEditable(false) ;          // Set to read-only
add(tfResult);                         // "this" Container adds the TextField
......
// Read an int from TextField "tfInput", square it, and display on "tfResult".
// getText() returns a String, need to convert to int
int number = Integer.parseInt(tfInput.getText());
number *= number;
// setText() requires a String, need to convert the int number to String.
tfResult.setText(number + "");


oooooooooooooooooooooooooooo AWT Event-Handling ooooooooooooooooooooooooooooooooooooooo

MouseListener:

public interface MouseListener {
   public void mousePressed(MouseEvent evt);  // Called back upon mouse-button pressed
   public void mouseReleased(MouseEvent evt); // Called back upon mouse-button released
   public void mouseClicked(MouseEvent evt);  // Called back upon mouse-button clicked (pressed and released)
   public void mouseEntered(MouseEvent evt);  // Called back when mouse pointer entered the component
   public void mouseExited(MouseEvent evt);   // Called back when mouse pointer exited the component
}

class MyMouseListener implement MouseListener {
   @Override
   public void mousePressed(MouseEvent e)  { 
      System.out.println("Mouse-button pressed!"); 
   }
 
   @Override
   public void mouseReleased(MouseEvent e) {
      System.out.println("Mouse-button released!"); 
   }
 
   @Override
   public void mouseClicked(MouseEvent e)  { 
      System.out.println("Mouse-button clicked (pressed and released)!"); 
   }
 
   @Override
   public void mouseEntered(MouseEvent e)  { 
      System.out.println("Mouse-pointer entered the source component!"); 
   }
 
   @Override
   public void mouseExited(MouseEvent e)   {
      System.out.println("Mouse exited-pointer the source component!");  
   }
}
